#!/bin/sh

# TODO: Manage different operations (revoke, delete)

uploadto=${uploadto:-""}
gen_revoc_cert=${gen_revoc_cert:-1}
revoc_cert_path=${revoc_cert_path:-"./"}
revoc_cert_name=${revoc_cert_name:-"gpg-revocation-certificate.asc"}
passphraselen=20

if command -v gpg 2>&1 >/dev/null && gpg --version | grep -q '^gpg (GnuPG) 1.'; then
	: # All good
else
	printf "Could not find dependency gpg in version 1. Please install it.\n" >&2a
	exit 1
fi

cat <<EOF

This script is for generating and uploading a pgp key. If you already have a
pgp key, please kill the script now and use it instead. Else just fill the data
below to continue.

EOF

if [ -n "$uploadto" ]; then
cat <<EOF
/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\
/!\\ WARNING: This data (excepted the passphrase) is going to be published  /!\\
/!\\          (as in, publicly available on the internet). Please keep that /!\\
/!\\          in mind when answering the questions.                         /!\\
/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\

EOF
fi

while [ -z "$full_name" ]; do
	printf "Full name: "
	read full_name
done

if [ -z "$comment" ]; then
	printf "Comment (optional): "
	read comment
	[ -n "$comment" ] && comment="Name-Comment: $comment"
fi

while [ -z "$mail" ]; do
	printf "Mail: "
	read mail
done

passphrases_match=0
while [ $passphrases_match -eq 0 ]; do
	[ -n "$passphrase" -a $(printf "%s" "$passphrase" | wc -c) -lt $passphraselen ] && printf "Error: the passphrase has to be longer than $passphraselen characters.\n" >&2
	while [ $(printf "%s" "$passphrase" | wc -c) -lt $passphraselen ]; do
		printf "Passphrase: "
		stty -echo; read passphrase; stty echo; printf "\n"
		[ $(printf "%s" "$passphrase" | wc -c) -lt $passphraselen ] && printf "Error: the passphrase has to be longer than $passphraselen characters.\n" >&2
	done
	printf "Passphrase (repeat): "
	stty -echo; read passphrase_check; stty echo; printf "\n"
	if [ "$passphrase" = "$passphrase_check" ]; then
		passphrases_match=1
	else
		printf "Passphrases did not match.\n" >&2
		passphrase=""
	fi
done

printf "\nGenerating key...\n"

# I apologize for the reviewer, the following ugliness due to GnuPG's
# implementation being terrible enough to approximate a malbolge program in
# shell (it writes the wrong stuff in the wrong streams. yay.)

# TODO: Evaluate how to replace it with `--status-fd 1`, it might be much simpler.

keyID="$(printf "Key-Type: RSA\nKey-Length: 4096\nSubkey-Type: RSA\nSubkey-Length: 4096\nName-Real: %s\n%s\nName-Email: %s\nExpire-Date: 365\nPassphrase: %s\n" "$full_name" "$comment" "$mail" "$passphrase" | { { gpg --gen-key --batch 3>&2 2>&1 1>&3 3<&- ; } | { tee /dev/stderr | sed '/^gpg: key [0-9A-F]* marked as ultimately trusted$/!d; s/^gpg: key \([0-9A-F]*\) marked as ultimately trusted$/\n\1\n/'; } 3>&2 2>&1 1>&3 3<&-; } 3>&2 2>&1 1>&3 3<&- | sed '/^$/d')"

if [ $gen_revoc_cert -eq 1 ]; then
	printf "\nGenerating revocation certificate for %s...\n" "$keyID"

	printf "y\n0\n\ny\n%s\n" "$passphrase" | gpg --command-fd 0 --output "$revoc_cert_path/$(echo "$mail" | tr ' ' '_')-$(date '+%s')-$revoc_cert_name" --gen-revoke "$keyID"
fi

if [ -n "$uploadto" ]; then
	printf "\nUploading key %s for %s to %s...\n" "$keyID" "$full_name" "$uploadto"
	gpg --keyserver "$uploadto" --send-keys "$keyID"
fi

printf "\nGeneration complete.\n\nMake backup copies of your revocation certificate in case you lose the key!\n"
